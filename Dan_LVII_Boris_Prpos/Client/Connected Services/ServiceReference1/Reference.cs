//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Service;
using System.Collections.Generic;

namespace Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/anything", ReplyAction="http://tempuri.org/IService1/anythingResponse")]
        void anything();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/anything", ReplyAction="http://tempuri.org/IService1/anythingResponse")]
        System.Threading.Tasks.Task anythingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ReadFile", ReplyAction="http://tempuri.org/IService1/ReadFileResponse")]
        string[] ReadFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ReadFile", ReplyAction="http://tempuri.org/IService1/ReadFileResponse")]
        System.Threading.Tasks.Task<string[]> ReadFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteFile", ReplyAction="http://tempuri.org/IService1/WriteFileResponse")]
        void WriteFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteFile", ReplyAction="http://tempuri.org/IService1/WriteFileResponse")]
        System.Threading.Tasks.Task WriteFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindMinimumOrder", ReplyAction="http://tempuri.org/IService1/FindMinimumOrderResponse")]
        int FindMinimumOrder();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindMinimumOrder", ReplyAction="http://tempuri.org/IService1/FindMinimumOrderResponse")]
        System.Threading.Tasks.Task<int> FindMinimumOrderAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateNewItem", ReplyAction="http://tempuri.org/IService1/CreateNewItemResponse")]
        void CreateNewItem(string name, int amount, int price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateNewItem", ReplyAction="http://tempuri.org/IService1/CreateNewItemResponse")]
        System.Threading.Tasks.Task CreateNewItemAsync(string name, int amount, int price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        Service.CompositeType GetDataUsingDataContract(Service.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Service.CompositeType> GetDataUsingDataContractAsync(Service.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateObjectList", ReplyAction="http://tempuri.org/IService1/CreateObjectListResponse")]
        Service.Item[] CreateObjectList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateObjectList", ReplyAction="http://tempuri.org/IService1/CreateObjectListResponse")]
        System.Threading.Tasks.Task<Service.Item[]> CreateObjectListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteObjectListToFile", ReplyAction="http://tempuri.org/IService1/WriteObjectListToFileResponse")]
        void WriteObjectListToFile(List<Item> list);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WriteObjectListToFile", ReplyAction="http://tempuri.org/IService1/WriteObjectListToFileResponse")]
        System.Threading.Tasks.Task WriteObjectListToFileAsync(List<Item> list);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.ServiceReference1.IService1>, Client.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void anything() {
            base.Channel.anything();
        }
        
        public System.Threading.Tasks.Task anythingAsync() {
            return base.Channel.anythingAsync();
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public string[] ReadFile() {
            return base.Channel.ReadFile();
        }
        
        public System.Threading.Tasks.Task<string[]> ReadFileAsync() {
            return base.Channel.ReadFileAsync();
        }
        
        public void WriteFile() {
            base.Channel.WriteFile();
        }
        
        public System.Threading.Tasks.Task WriteFileAsync() {
            return base.Channel.WriteFileAsync();
        }
        
        public int FindMinimumOrder() {
            return base.Channel.FindMinimumOrder();
        }
        
        public System.Threading.Tasks.Task<int> FindMinimumOrderAsync() {
            return base.Channel.FindMinimumOrderAsync();
        }
        
        public void CreateNewItem(string name, int amount, int price) {
            base.Channel.CreateNewItem(name, amount, price);
        }
        
        public System.Threading.Tasks.Task CreateNewItemAsync(string name, int amount, int price) {
            return base.Channel.CreateNewItemAsync(name, amount, price);
        }
        
        public Service.CompositeType GetDataUsingDataContract(Service.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Service.CompositeType> GetDataUsingDataContractAsync(Service.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public Service.Item[] CreateObjectList() {
            return base.Channel.CreateObjectList();
        }
        
        public System.Threading.Tasks.Task<Service.Item[]> CreateObjectListAsync() {
            return base.Channel.CreateObjectListAsync();
        }
        
        public void WriteObjectListToFile(List<Item> list) {
            base.Channel.WriteObjectListToFile(list);
        }
        
        public System.Threading.Tasks.Task WriteObjectListToFileAsync(List<Item> list) {
            return base.Channel.WriteObjectListToFileAsync(list);
        }
    }
}
